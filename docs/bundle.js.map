{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://solid-app/./src/index.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/area-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/bar-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/baseline-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/candlestick-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/chart.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/histogram-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/internal/context.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/internal/utils.ts","webpack://solid-app/./src/solid-lightweight-charts/components/line-series.tsx","webpack://solid-app/./src/solid-lightweight-charts/components/price-line.tsx","webpack://solid-app/./src/solid-lightweight-charts/internal/collection.ts","webpack://solid-app/./src/solid-lightweight-charts/internal/lines.ts","webpack://solid-app/./src/solid-lightweight-charts/internal/series.ts","webpack://solid-app/./src/solid-lightweight-charts/internal/utils.ts"],"sourcesContent":["import {render} from 'solid-js/web';\nimport {createSignal, Show} from 'solid-js';\nimport {LineStyle, SeriesType} from 'lightweight-charts';\n\nimport {Chart} from './solid-lightweight-charts/components/chart';\nimport {LineSeries} from './solid-lightweight-charts/components/line-series';\nimport {PriceLine} from './solid-lightweight-charts/components/price-line';\nimport {BarSeries} from './solid-lightweight-charts/components/bar-series';\nimport {CandlestickSeries} from './solid-lightweight-charts/components/candlestick-series';\nimport {AreaSeries} from './solid-lightweight-charts/components/area-series';\nimport {BaselineSeries} from './solid-lightweight-charts/components/baseline-series';\nimport {HistogramSeries} from './solid-lightweight-charts/components/histogram-series';\n\nexport function App() {\n    const [height, setHeight] = createSignal(400);\n    const [width, setWidth] = createSignal(600);\n    const [active, setActive] = createSignal(true);\n    const [color, setColor] = createSignal('#0000FF');\n    const [line, setLine] = createSignal(false);\n    const [type, setType] = createSignal<SeriesType>('Line');\n    const [time, setTime] = createSignal('');\n    const [price, setPrice] = createSignal('');\n    const [point, setPoint] = createSignal('');\n    const [trackHover, setTrackHover] = createSignal(true);\n    const [trackClick, setTrackClick] = createSignal(true);\n\n    return (\n        <>\n            <fieldset>\n                <legend>View:</legend>\n                <label>\n                    Active:\n                    <input\n                        type=\"checkbox\"\n                        name=\"active\"\n                        checked={active()}\n                        onChange={(e) => setActive(e.currentTarget.checked)}\n                    />\n                </label>\n                <br/>\n                <label>\n                    Height:\n                    <input\n                        type=\"range\"\n                        name=\"height\"\n                        value={height()}\n                        min={200}\n                        max={600}\n                        step={1}\n                        onChange={(e) => setHeight(e.currentTarget.valueAsNumber)}\n                    />\n                </label>\n                <br/>\n                <label>\n                    Width:\n                    <input\n                        type=\"range\"\n                        name=\"width\"\n                        value={width()}\n                        min={300}\n                        max={1000}\n                        step={1}\n                        onChange={(e) => setWidth(e.currentTarget.valueAsNumber)}\n                    />\n                </label>\n            </fieldset>\n            <fieldset>\n                <legend>Series:</legend>\n                <label>\n                    Show line:\n                    <input\n                        type=\"checkbox\"\n                        name=\"line\"\n                        checked={line()}\n                        onChange={(e) => setLine(e.currentTarget.checked)}\n                    />\n                </label>\n                <br/>\n                <label>\n                    Color:\n                    <input\n                        type=\"color\"\n                        name=\"color\"\n                        value={color()}\n                        onChange={(e) => setColor(e.currentTarget.value)}\n                    />\n                </label>\n                <br/>\n                Type:<br/>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Line'}\n                        onChange={(e) => setType('Line')}\n                    /> - Line\n                    <br/>\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Area'}\n                        onChange={(e) => setType('Area')}\n                    /> - Area\n                    <br/>\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Baseline'}\n                        onChange={(e) => setType('Baseline')}\n                    /> - Baseline\n                    <br/>\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Candlestick'}\n                        onChange={(e) => setType('Candlestick')}\n                    /> - Candlestick\n                    <br/>\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Histogram'}\n                        onChange={(e) => setType('Histogram')}\n                    /> - Histogram\n                    <br/>\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"series-type\"\n                        checked={type() === 'Bar'}\n                        onChange={(e) => setType('Bar')}\n                    /> - Bar\n                </label>\n            </fieldset>\n            <fieldset>\n                <legend>Crosshair:</legend>\n                <label>Track: <input type=\"checkbox\" name=\"tack-hover\" checked={trackHover()} onChange={(e) => setTrackHover(e.currentTarget.checked)}/></label>\n                <br/>\n                Time: {time()}\n                <br/>\n                Price: {price()}\n            </fieldset>\n            <fieldset>\n                <legend>Click:</legend>\n                <label>Track: <input type=\"checkbox\" name=\"tack-click\" checked={trackClick()} onChange={(e) => setTrackClick(e.currentTarget.checked)}/></label>\n                <br/>\n                Point: {point()}\n            </fieldset>\n            <Show when={active()}>\n                <Chart\n                    height={height()}\n                    width={width()}\n                    onCrosshairMove={trackHover() ? (params) => {\n                        if (typeof params.time === 'undefined') {\n                            setTime('');\n                        }\n                        if (typeof params.time === 'object') {\n                            const date = new Date(params.time.year, params.time.month, params.time.day);\n                            setTime(date.toDateString());\n                        }\n                        if (typeof params.time === 'number') {\n                            const date = new Date(params.time / 1000);\n                            setTime(date.toDateString());\n                        }\n\n                        const [value] = params.seriesPrices.values();\n                        if (typeof value === 'undefined') {\n                            setPrice('');\n                        }\n                        if (typeof value === 'number') {\n                            setPrice(value.toFixed(2));\n                        }\n                        if (typeof value === 'object') {\n                            setPrice(`O: ${value.open} H: ${value.high} L: ${value.low} C: ${value.close}`);\n                        }\n                    } : undefined}\n                    onClick={trackClick() ? (params) => {\n                        setPoint(`X - ${params.point?.x ?? ''} Y - ${params.point?.y ?? ''}`)\n                    } : undefined}\n                >\n                    {type() === 'Line' && (\n                        <LineSeries\n                            color={color()}\n                            data={[\n                                {time: '2019-04-11', value: 80.01},\n                                {time: '2019-04-12', value: 96.63},\n                                {time: '2019-04-13', value: 76.64},\n                                {time: '2019-04-14', value: 81.89},\n                                {time: '2019-04-15', value: 74.43},\n                                {time: '2019-04-16', value: 80.01},\n                                {time: '2019-04-17', value: 96.63},\n                                {time: '2019-04-18', value: 76.64},\n                                {time: '2019-04-19', value: 81.89},\n                                {time: '2019-04-20', value: 74.43},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={80}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </LineSeries>\n                    )}\n\n                    {type() === 'Area' && (\n                        <AreaSeries\n                            data={[\n                                {time: '2019-04-11', value: 80.01},\n                                {time: '2019-04-12', value: 96.63},\n                                {time: '2019-04-13', value: 76.64},\n                                {time: '2019-04-14', value: 81.89},\n                                {time: '2019-04-15', value: 74.43},\n                                {time: '2019-04-16', value: 80.01},\n                                {time: '2019-04-17', value: 96.63},\n                                {time: '2019-04-18', value: 76.64},\n                                {time: '2019-04-19', value: 81.89},\n                                {time: '2019-04-20', value: 74.43},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={80}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </AreaSeries>\n                    )}\n\n                    {type() === 'Histogram' && (\n                        <HistogramSeries\n                            data={[\n                                {time: '2019-04-11', value: 80.01},\n                                {time: '2019-04-12', value: 96.63},\n                                {time: '2019-04-13', value: 76.64},\n                                {time: '2019-04-14', value: 81.89},\n                                {time: '2019-04-15', value: 74.43},\n                                {time: '2019-04-16', value: 80.01},\n                                {time: '2019-04-17', value: 96.63},\n                                {time: '2019-04-18', value: 76.64},\n                                {time: '2019-04-19', value: 81.89},\n                                {time: '2019-04-20', value: 74.43},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={80}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </HistogramSeries>\n                    )}\n\n                    {type() === 'Baseline' && (\n                        <BaselineSeries\n                            baseValue={{\n                                type: 'price',\n                                price: 85,\n                            }}\n                            data={[\n                                {time: '2019-04-11', value: 80.01},\n                                {time: '2019-04-12', value: 96.63},\n                                {time: '2019-04-13', value: 76.64},\n                                {time: '2019-04-14', value: 81.89},\n                                {time: '2019-04-15', value: 74.43},\n                                {time: '2019-04-16', value: 80.01},\n                                {time: '2019-04-17', value: 96.63},\n                                {time: '2019-04-18', value: 76.64},\n                                {time: '2019-04-19', value: 81.89},\n                                {time: '2019-04-20', value: 74.43},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={80}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </BaselineSeries>\n                    )}\n\n                    {type() === 'Bar' && (\n                        <BarSeries\n                            data={[\n                                {time: '2018-10-19', open: 180.34, high: 180.99, low: 178.57, close: 179.85},\n                                {time: '2018-10-22', open: 180.82, high: 181.40, low: 177.56, close: 178.75},\n                                {time: '2018-10-23', open: 175.77, high: 179.49, low: 175.44, close: 178.53},\n                                {time: '2018-10-24', open: 178.58, high: 182.37, low: 176.31, close: 176.97},\n                                {time: '2018-10-25', open: 177.52, high: 180.50, low: 176.83, close: 179.07},\n                                {time: '2018-10-26', open: 176.88, high: 177.34, low: 170.91, close: 172.23},\n                                {time: '2018-10-29', open: 173.74, high: 175.99, low: 170.95, close: 173.20},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={178}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </BarSeries>\n                    )}\n\n                    {type() === 'Candlestick' && (\n                        <CandlestickSeries\n                            data={[\n                                {time: '2018-10-19', open: 180.34, high: 180.99, low: 178.57, close: 179.85},\n                                {time: '2018-10-22', open: 180.82, high: 181.40, low: 177.56, close: 178.75},\n                                {time: '2018-10-23', open: 175.77, high: 179.49, low: 175.44, close: 178.53},\n                                {time: '2018-10-24', open: 178.58, high: 182.37, low: 176.31, close: 176.97},\n                                {time: '2018-10-25', open: 177.52, high: 180.50, low: 176.83, close: 179.07},\n                                {time: '2018-10-26', open: 176.88, high: 177.34, low: 170.91, close: 172.23},\n                                {time: '2018-10-29', open: 173.74, high: 175.99, low: 170.95, close: 173.20},\n                            ]}\n                        >\n                            <Show when={line()}>\n                                <PriceLine\n                                    price={178}\n                                    color=\"#FF0000\"\n                                    lineWidth={1}\n                                    lineStyle={LineStyle.Solid}\n                                    axisLabelVisible={true}\n                                    title=\"price\"\n                                />\n                            </Show>\n                        </CandlestickSeries>\n                    )}\n                </Chart>\n            </Show>\n        </>\n    );\n}\n\nrender(() => <App/>, document.body);\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    AreaSeriesPartialOptions,\n    ISeriesApi,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface AreaSeriesProps extends AreaSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Area'>>;\n    data: SeriesDataItemTypeMap['Area'][];\n    children?: JSX.Element;\n}\n\nexport function AreaSeries(props: AreaSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Area'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Area'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Area',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Area'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    ISeriesApi,\n    BarSeriesPartialOptions,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface BarSeriesProps extends BarSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Bar'>>;\n    data: SeriesDataItemTypeMap['Bar'][];\n    children?: JSX.Element;\n}\n\nexport function BarSeries(props: BarSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Bar'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Bar'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Bar',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Bar'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    ISeriesApi,\n    BaselineSeriesPartialOptions,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface BaselineSeriesProps extends BaselineSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Baseline'>>;\n    data: SeriesDataItemTypeMap['Baseline'][];\n    children?: JSX.Element;\n}\n\nexport function BaselineSeries(props: BaselineSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Baseline'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Baseline'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Baseline',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Baseline'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    ISeriesApi,\n    CandlestickSeriesPartialOptions,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface CandlestickSeriesProps extends CandlestickSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Candlestick'>>;\n    data: SeriesDataItemTypeMap['Candlestick'][];\n    children?: JSX.Element;\n}\n\nexport function CandlestickSeries(props: CandlestickSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Candlestick'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Candlestick'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Candlestick',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Candlestick'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport {ChartOptions, createChart, DeepPartial, IChartApi, MouseEventHandler} from 'lightweight-charts';\nimport {createSignal, splitProps, Show, onMount, createEffect, onCleanup} from 'solid-js';\n\nimport {ApiProvider} from './internal/context';\nimport {Reference} from '../types';\n\nexport interface ChartProps extends ChartActionParams {\n    children?: JSX.Element;\n}\n\nexport function Chart(props: ChartProps): JSX.Element {\n    const [api, setApi] = createSignal<IChartApi | null>(null);\n    const [, params] = splitProps(props, ['children']);\n\n    return (\n        <>\n            <div use:action={[\n                (element: HTMLElement, params: ChartActionParams) => {\n                    let {onClick, onCrosshairMove, ref, ...options} = params;\n                    const subject = createChart(element, options);\n\n                    if (onClick) {\n                        subject.subscribeClick(onClick);\n                    }\n                    if (onCrosshairMove) {\n                        subject.subscribeCrosshairMove(onCrosshairMove);\n                    }\n\n                    if (ref) {\n                        ref(subject);\n                    }\n\n                    setApi(subject);\n                    return {\n                        update(nextParams: ChartActionParams): void {\n                            const {\n                                ref: nextRef,\n                                onClick: nextOnClick,\n                                onCrosshairMove: nextOnCrosshairMove,\n                                ...nextOptions\n                            } = nextParams;\n\n                            if (nextRef !== ref) {\n                                ref?.(null);\n                                ref = nextRef;\n                                ref?.(subject);\n                            }\n\n                            subject.applyOptions(nextOptions);\n\n                            if (nextOnClick !== onClick) {\n                                if (onClick) {\n                                    subject.unsubscribeClick(onClick);\n                                }\n                                onClick = nextOnClick;\n                                if (onClick) {\n                                    subject.subscribeClick(onClick);\n                                }\n                            }\n\n                            if (nextOnCrosshairMove !== onCrosshairMove) {\n                                if (onCrosshairMove) {\n                                    subject.unsubscribeCrosshairMove(onCrosshairMove);\n                                }\n                                onCrosshairMove = nextOnCrosshairMove;\n                                if (onCrosshairMove) {\n                                    subject.subscribeCrosshairMove(onCrosshairMove);\n                                }\n                            }\n                        },\n                        destroy(): void {\n                            subject.remove();\n                            setApi(null);\n                        }\n                    };\n                },\n                params,\n            ]}/>\n            {/*\n                It is important to keep fake nodes as siblings of DIV\n                because of strange behaviour of solid with empty elements.\n\n                Solid will clean such nodes and kill manually inserted canvas.\n            */}\n            <Show when={api()}>\n            {(value: IChartApi) => (\n                <ApiProvider value={value}>\n                    {props.children}\n                </ApiProvider>\n            )}\n            </Show>\n        </>\n    );\n}\n\n/**\n * @internal\n */\ndeclare module 'solid-js' {\n    namespace JSX {\n        interface Directives {\n            action: [\n                (element: HTMLElement, params: ChartActionParams) => {\n                    update(nextParams: ChartActionParams): void;\n                    destroy(): void;\n                },\n                ChartActionParams,\n            ]\n        }\n    }\n}\n\ninterface ChartActionParams extends DeepPartial<ChartOptions>{\n    ref?: Reference<IChartApi>;\n    onClick?: MouseEventHandler;\n    onCrosshairMove?: MouseEventHandler;\n}\n\nfunction action(\n    element: HTMLElement,\n    accessor: () => [\n        (element: HTMLElement, params: ChartActionParams) => {\n            update(nextParams: ChartActionParams): void;\n            destroy(): void;\n        },\n        DeepPartial<ChartOptions>,\n    ]\n): void {\n    let action: {\n        update(nextParams: ChartActionParams): void;\n        destroy(): void;\n    }\n\n    onMount(() => {\n        const [fn, params] = accessor();\n        action = fn(element, {...params});\n    });\n\n    createEffect(\n        (mounted: boolean) => {\n            const [, {...params}] = accessor();\n            if (mounted) {\n                action.update(params);\n            }\n            return true;\n        },\n        false\n    );\n\n    onCleanup(() => {\n        action.destroy();\n    });\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    ISeriesApi,\n    HistogramSeriesPartialOptions,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface HistogramSeriesProps extends HistogramSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Histogram'>>;\n    data: SeriesDataItemTypeMap['Histogram'][];\n    children?: JSX.Element;\n}\n\nexport function HistogramSeries(props: HistogramSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Histogram'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Histogram'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Histogram',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Histogram'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\n\nimport {createContext, useContext} from 'solid-js';\nimport {IChartApi, ISeriesApi, SeriesType} from 'lightweight-charts';\n\nconst Context = createContext<ApiContext | null>(null);\n\nexport type ApiContext = IChartApi | ISeriesApi<SeriesType>;\n\nexport function context<T extends ApiContext>(): T {\n    return useContext(Context) as T;\n}\n\nexport interface ApiProviderProps<T extends ApiContext> {\n    value: T;\n    children: JSX.Element;\n}\n\nexport function ApiProvider<T extends ApiContext>(props: ApiProviderProps<T>): JSX.Element {\n    return (\n        <Context.Provider value={props.value}>\n            {props.children}\n        </Context.Provider>\n    )\n}\n","import type {IChartApi, IPriceLine, ISeriesApi, SeriesType} from 'lightweight-charts';\nimport type {PriceLineParams, Reference} from '../../types';\nimport type {PriceLineActionResult} from '../../internal/lines';\n\nimport {createEffect, onCleanup, onMount} from 'solid-js';\nimport {series, SeriesActionResult, SeriesParams} from '../../internal/series';\nimport {line} from '../../internal/lines';\nimport {context} from './context';\n\nexport function useSeriesEffect<T extends SeriesParams>(\n    callback: () => [params: T, ref: Reference<ISeriesApi<T['type']>> | undefined]\n): void {\n    let subject: SeriesActionResult<T> | null = null;\n\n    const api = context<IChartApi>();\n\n    onMount(() => {\n        const [{...params}, ref] = callback();\n        console.log('series mount')\n        subject = series(api, params);\n        subject.updateReference(ref);\n    });\n\n    onCleanup(() => {\n        subject?.destroy();\n        subject = null;\n    });\n\n    createEffect(\n        (mounted: boolean) => {\n            const [{...params}, ref] = callback();\n\n            if (mounted) {\n                subject?.update(params);\n                subject?.updateReference(ref);\n            }\n            return true;\n        },\n        false\n    );\n}\n\nexport function useLineEffect(callback: () => [params: PriceLineParams, ref: Reference<IPriceLine> | undefined]): void {\n    let subject: PriceLineActionResult | null = null;\n\n    const api = context<ISeriesApi<SeriesType>>();\n\n    onMount(() => {\n        const [{...params}, ref] = callback();\n        subject = line(api, params);\n        subject.updateReference(ref)\n    });\n\n    onCleanup(() => {\n        subject?.destroy();\n        subject = null;\n    });\n\n    createEffect(\n        (mounted: boolean) => {\n            const [{...params}, ref] = callback();\n\n            if (mounted) {\n                subject?.update(params);\n                subject?.updateReference(ref);\n            }\n            return true;\n        },\n        false\n    );\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\nimport type {\n    ISeriesApi,\n    LineSeriesPartialOptions,\n    SeriesDataItemTypeMap\n} from 'lightweight-charts';\n\nimport {createSignal, splitProps, Show} from 'solid-js';\nimport {Reference} from '../types';\nimport {useSeriesEffect} from './internal/utils';\nimport {ApiProvider} from './internal/context';\n\nexport interface LineSeriesProps extends LineSeriesPartialOptions {\n    ref?: Reference<ISeriesApi<'Line'>>;\n    data: SeriesDataItemTypeMap['Line'][];\n    children?: JSX.Element;\n}\n\nexport function LineSeries(props: LineSeriesProps): JSX.Element {\n    const id = performance.now().toString();\n    const [, options] = splitProps(props, ['ref', 'data', 'children']);\n    const [api, setApi] = createSignal<ISeriesApi<'Line'> | null>(null);\n    const handleReference = (ref: ISeriesApi<'Line'> | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useSeriesEffect(() => [\n        {\n            id,\n            type: 'Line',\n            get options() {\n                return {...options};\n            },\n            data: props.data,\n        },\n        handleReference,\n    ]);\n\n    return (\n        <Show when={api()}>\n        {(value: ISeriesApi<'Line'>) => (\n            <ApiProvider value={value}>{props.children}</ApiProvider>\n        )}\n        </Show>\n    )\n}\n","import type {JSX} from 'solid-js/jsx-runtime';\n\nimport {IPriceLine, PriceLineOptions} from 'lightweight-charts';\nimport {Reference} from '../types';\nimport {createSignal, splitProps} from 'solid-js';\nimport {useLineEffect} from './internal/utils';\n\nexport interface PriceLineProps extends PriceLineOptions {\n    ref?: Reference<IPriceLine>;\n}\n\nexport function PriceLine(props: PriceLineProps): JSX.Element {\n    const [, options] = splitProps(props, ['ref']);\n    const id = performance.now().toString();\n\n    const [api, setApi] = createSignal<IPriceLine | null>(null);\n    const handleReference = (ref: IPriceLine | null) => {\n        console.log(ref);\n        setApi(ref);\n    }\n\n    useLineEffect(() => [\n        {\n            id,\n            get options() {\n                return {...options};\n            },\n        },\n        handleReference\n    ]);\n\n    return undefined;\n}\n","import type {ActionResult, Reference, ReferencableActionResult} from '../types';\nimport {ensure} from './utils';\n\nexport function collection<T, K, P extends { id: string }, R extends ReferencableActionResult<P, K>>(\n    target: T,\n    params: P[] = [],\n    factory: (target: T, params: P) => R,\n    reference: (params: P) => Reference<K> | undefined\n): ActionResult<P[] | undefined> {\n    const collection = new Map<string, R>();\n    for (const current of params) {\n        const result = factory(target, current);\n        result.updateReference(reference(current));\n\n        collection.set(current.id, result);\n    }\n\n    return {\n        update(nextParams: P[] = []): void {\n            const existing = new Set(collection.keys());\n            const next = new Map(nextParams.map((item: P) => [item.id, item]));\n\n            for (const id of existing) {\n                if (!next.has(id)) {\n                    const entry = ensure(collection.get(id))\n                    entry.destroy();\n\n                    collection.delete(id);\n                }\n            }\n\n            for (const [id, options] of next.entries()) {\n                const entry = collection.get(id);\n                if (entry === undefined) {\n                    const created = factory(target, options);\n                    created.updateReference(reference(options));\n                    collection.set(id, created);\n                } else {\n                    entry.update(options);\n                    entry.updateReference(reference(options));\n                }\n            }\n        },\n        destroy() {\n            for (const current of collection.values()) {\n                current.destroy();\n            }\n        }\n    }\n}\n","import type {IPriceLine, ISeriesApi, SeriesType} from 'lightweight-charts';\nimport type {ActionResult, Reference, PriceLineParams, ReferencableActionResult} from '../types';\nimport {collection} from './collection';\n\nexport type PriceLineActionResult = ReferencableActionResult<PriceLineParams, IPriceLine>;\n\nexport function linesCollection<T extends SeriesType>(\n    target: ISeriesApi<T>,\n    params: PriceLineParams[] = []\n): ActionResult<PriceLineParams[] | undefined> {\n    return collection(target, params, line, (p: PriceLineParams) => p.reference);\n}\n\nexport function line<T extends SeriesType>(\n    target: ISeriesApi<T>,\n    params: PriceLineParams\n): PriceLineActionResult {\n    const subject = target.createPriceLine(params.options);\n    let reference: Reference<IPriceLine>;\n\n    return {\n        update(nextParams: PriceLineParams): void {\n            if (nextParams.options) {\n                subject.applyOptions(nextParams.options);\n            }\n        },\n        updateReference(nextReference: Reference<IPriceLine>): void {\n            if (nextReference !== reference) {\n                reference?.(null)\n                reference = nextReference;\n                reference?.(subject);\n            }\n        },\n        destroy(): void {\n            reference?.(null);\n            target.removePriceLine(subject);\n        }\n    };\n}\n","import type {IChartApi, ISeriesApi, SeriesType} from 'lightweight-charts';\nimport type {ActionResult, ReferencableActionResult, Reference, SeriesActionParams} from '../types';\nimport {collection} from './collection';\nimport {linesCollection} from './lines';\n\nexport type SeriesParams = Omit<SeriesActionParams, 'reference'>;\n\nexport type SeriesActionResult<T extends SeriesParams> = ReferencableActionResult<T, ISeriesApi<T['type']>>;\n\nexport function seriesCollection(target: IChartApi, params: SeriesActionParams[] = []): ActionResult<SeriesActionParams[] | undefined> {\n    return collection(\n        target,\n        params,\n        series,\n        (p: SeriesActionParams) => p.reference as Reference<ISeriesApi<SeriesType>>\n    );\n}\n\nexport function series<T extends SeriesParams>(target: IChartApi, params: T): SeriesActionResult<T> {\n    let subject = createSeries(target, params);\n    let reference: Reference<ISeriesApi<SeriesType>>;\n\n    let lines = linesCollection(subject, params.priceLines);\n\n    return {\n        update(nextParams: SeriesParams): void {\n            if (nextParams.type !== subject.seriesType()) {\n                lines.destroy();\n                target.removeSeries(subject);\n                reference?.(null);\n                subject = createSeries(target, nextParams);\n                reference?.(subject);\n                lines = linesCollection(subject, params.priceLines);\n                return;\n            }\n\n            if (nextParams.options) {\n                subject.applyOptions(nextParams.options);\n            }\n\n            lines.update(nextParams.priceLines);\n        },\n        updateReference(nextReference: Reference<ISeriesApi<T['type']>>): void {\n            if (nextReference !== reference) {\n                reference?.(null)\n                reference = nextReference;\n                reference?.(subject);\n            }\n        },\n        destroy(): void {\n            lines.destroy();\n            reference?.(null);\n            target.removeSeries(subject);\n        }\n    };\n}\n\nfunction createSeries<T extends SeriesActionParams>(\n    chart: IChartApi,\n    params: SeriesActionParams\n): ISeriesApi<T['type']> {\n    switch (params.type) {\n        case 'Area': {\n            const series = chart.addAreaSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n        case 'Bar': {\n            const series = chart.addBarSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n        case 'Candlestick': {\n            const series = chart.addCandlestickSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n        case 'Histogram': {\n            const series = chart.addHistogramSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n        case 'Line': {\n            const series = chart.addLineSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n        case 'Baseline': {\n            const series = chart.addBaselineSeries(params.options);\n            series.setData(params.data);\n            return series;\n        }\n    }\n}\n","export function ensure<T>(value: T | null | undefined): T {\n    if (value === null || value === undefined) {\n        throw new Error('no value');\n    }\n    return value;\n}\n"],"names":["render","createSignal","Show","LineStyle","Chart","LineSeries","PriceLine","BarSeries","CandlestickSeries","AreaSeries","BaselineSeries","HistogramSeries","App","height","setHeight","width","setWidth","active","setActive","color","setColor","line","setLine","type","setType","time","setTime","price","setPrice","point","setPoint","trackHover","setTrackHover","trackClick","setTrackClick","e","currentTarget","checked","valueAsNumber","value","params","date","Date","year","month","day","toDateString","seriesPrices","values","toFixed","open","high","low","close","undefined","x","y","Solid","document","body","splitProps","useSeriesEffect","ApiProvider","props","id","performance","now","toString","options","api","setApi","handleReference","ref","console","log","data","children","createChart","onMount","createEffect","onCleanup","element","onClick","onCrosshairMove","subject","subscribeClick","subscribeCrosshairMove","update","nextParams","nextRef","nextOnClick","nextOnCrosshairMove","nextOptions","applyOptions","unsubscribeClick","unsubscribeCrosshairMove","destroy","remove","action","accessor","fn","mounted","createContext","useContext","Context","context","series","callback","updateReference","useLineEffect","ensure","collection","target","factory","reference","Map","current","result","set","existing","Set","keys","next","map","item","has","entry","get","delete","entries","created","linesCollection","p","createPriceLine","nextReference","removePriceLine","seriesCollection","createSeries","lines","priceLines","seriesType","removeSeries","chart","addAreaSeries","setData","addBarSeries","addCandlestickSeries","addHistogramSeries","addLineSeries","addBaselineSeries","Error"],"sourceRoot":""}